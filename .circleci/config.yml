version: 2.1
orbs:
  slack: circleci/slack@4.1
executors:
  app-executor:
    docker:
      - image: cimg/node:15.2.0
    working_directory: ~/my_repo
  slack-executor:
    docker:
      - image: cimg/base:latest
    resource_class: small

aliases:
  - &show_branch
    run:
      name: Show current branch after checkout
      command: echo ${CIRCLE_BRANCH}
  - &restore_cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install_dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save_cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install_aws_cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
  - &build_project
    run:
      name: Build project
      command: |
        npm run build
        cd public
        zip ../build.zip -r * .[^.]*
        echo "Build successful"

jobs:
  install_packages:
    executor: app-executor
    steps:
      - checkout
      - *show_branch
      - *restore_cache
      - *install_dependencies
      - *save_cache
  lint:
    executor: app-executor
    steps:
      - checkout
      - *show_branch
      - *restore_cache
      - run:
          name: Run linting with ESLint + Prettier
          command: |
            npm run lint
  gatsby_build:
    executor: app-executor
    steps:
      - checkout
      - *show_branch
      - *restore_cache
      - *build_project
  notify_develop:
    - run: echo "Slack notification"
    - slack/notify
        event: 'always'
        channel: "general"
        template: ''
        custom: |
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${CIRCLE_BRANCH} branch build is complete",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch*:\n$CIRCLE_BRANCH"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
  deploy_to_aws_s3:
    executor: app-executor
    steps:
      - checkout
      - *show_branch
      - *install_aws_cli
      - *restore_cache
      - *build_project
      - run:
          name: Deploy to S3
          command: aws --region ${AWS_REGION} s3 sync ~/my_repo/public s3://${AWS_BUCKET_NAME} --delete
  deploy_to_aws_cloudfront:
    executor: app-executor
    steps:
      - checkout
      - *show_branch
      - *install_aws_cli
      - *restore_cache
      - *build_project
      - run:
          name: Deploy to CloudFront (before invalidating old distributions)
          command: |
            aws configure set preview.cloudfront true
            aws cloudfront create-invalidation --distribution-id ${CF_DISTRIBUTION_ID} --paths /\*

workflows:
  build_and_deploy:
    jobs:
      - install_packages
      - lint:
          requires:
            - install_packages
          filters: &only_develop
            branches:
              only:
                - develop
      - gatsby_build:
          requires:
            - lint
          filters:
            <<: *only_develop
      - notify_develop:
          requires:
            - gatsby_build
          filters:
            <<: *only_develop
          context:
            - slack_context
      ## Our production workflow only relies on package installation, not lint/gatsby_build
      - deploy_to_aws_s3:
          filters: &only_production
            branches:
              only:
                - main
          context:
            - blog_context
            - aws_context
          requires:
            - install_packages
      - deploy_to_aws_cloudfront:
          context:
            - blog_context
            - aws_context
          requires:
            - deploy_to_aws_s3
          filters:
            <<: *only_production
